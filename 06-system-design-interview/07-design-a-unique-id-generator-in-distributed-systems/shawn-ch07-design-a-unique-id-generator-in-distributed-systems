### CHAPTER 7: DESIGN A UNIQUE ID GENERATOR IN
DISTRIBUTED SYSTEMS
![alt text](image.png)
#### Step 1 - Understand the problem and establish design scope
requirements are listed as follows:
• IDs must be unique.
• IDs are numerical values only.
• IDs fit into 64-bit.
• IDs are ordered by date.
• Ability to generate over 10,000 unique IDs per second.

#### Step 2 - Propose high-level design and get buy-in

##### Multi-master replication
![alt text](image-1.png)
This approach uses the databases’ auto_increment feature
• Hard to scale with multiple data centers
• IDs do not go up with time across multiple servers.
• It does not scale well when a server is added or removed.

##### UUID
A UUID is another easy way to obtain unique IDs. UUID is a 128-bit number used to identify
information in computer systems. UUID has a very low probability of getting collusion.
![alt text](image-2.png)
Pros:
• Generating UUID is simple. No coordination between servers is needed so there will not
be any synchronization issues.
• The system is easy to scale because each web server is responsible for generating IDs
they consume. ID generator can easily scale with web servers.
Cons:
• IDs are 128 bits long, but our requirement is 64 bits.
• IDs do not go up with time.
• IDs could be non-numeric.
##### Ticket Server
The idea is to use a centralized auto_increment feature in a single database server (Ticket Server). To learn more about this, refer to flicker’s engineering blog article [2].
Pros:
• Numeric IDs.
• It is easy to implement, and it works for small to medium-scale applications.
Cons:
• Single point of failure. Single ticket server means if the ticket server goes down, all systems that depend on it will face issues. To avoid a single point of failure, we can set up
multiple ticket servers. However, this will introduce new challenges such as data
synchronization.
![alt text](image-3.png)

##### Twitter snowflake approach
![alt text](image-4.png)

#### Step 3 - Design deep dive
##### Timestamp
![alt text](image-5.png)
##### Sequence number

#### Step 4 - Wrap up
• Clock synchronization. In our design, we assume ID generation servers have the same
clock. This assumption might not be true when a server is running on multiple cores. The
same challenge exists in multi-machine scenarios. Solutions to clock synchronization are out of the scope of this book; however, it is important to understand the problem exists.
Network Time Protocol is the most popular solution to this problem. For interested
readers, refer to the reference material [4].
• Section length tuning. For example, fewer sequence numbers but more timestamp bits
are effective for low concurrency and long-term applications.
• High availability. Since an ID generator is a mission-critical system, it must be highly
available.